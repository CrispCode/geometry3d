'use strict'

import approx from './../utils/approx.js'

/**
 * The definition of a point. You may alter this object with additional properties but they will be ignored by methods such as: copy(), clone(), isEqual()
 * @typedef {Object} _PointObject
 * @property {number} x The X coordonate in 3D space
 * @property {number} y The Y coordonate in 3D space
 * @property {number} z The Z coordonate in 3D space
 */

/**
 * A function used to manage mathematical points (_PointObject). It will create an empty _PointObject if an invalid parameter is received
 * @param {_PointObject} [point] A _PointObject to perform operations on
 * @returns {_PointManipulation} Returns a set of functions used to manipulate the _PointObject
 */
export function Point ( point ) {
  const original = Point.isValid( point ) ? point : Point.create()

  return {
    /**
     * Returns the original _PointObject
     * @memberof _PointManipulation
     * @returns {_PointObject} Returns the original _PointObject
     */
    toObject: () => {
      return original
    },

    /**
     * Clones a _PointObject
     * @memberof _PointManipulation
     * @returns {_PointManipulation} Returns a set of functions used to manipulate the _PointObject
     */
    clone: () => {
      return Point( Point.create( original.x, original.y, original.z ) )
    },

    /**
     * Copies the values of a _PointObject into the original _PointObject
     * @memberof _PointManipulation
     * @param {_PointObject} point Source _PointObject
     * @returns {_PointManipulation} Returns a set of functions used to manipulate the _PointObject
     */
    copy: ( point ) => {
      original.x = point.x
      original.y = point.y
      original.z = point.z
      return Point( original )
    },

    /**
     * Rounds the _PointObject coordonates to a specified number of decimals
     * @memberof _PointManipulation
     * @param {Number} [decimals=0] The number of decimals to round to
     * @returns {_PointManipulation} Returns a set of functions used to manipulate the _PointObject
     */
    round: ( decimals = 0 ) => {
      original.x = approx( original.x, decimals )
      original.y = approx( original.y, decimals )
      original.z = approx( original.z, decimals )
      return Point( original )
    },

    /**
     * Translates a _PointObject by the given amount
     * @memberof _PointManipulation
     * @param {_VectorObject} vector The _VectorObject used to make the translation
     * @returns {_PointManipulation} Returns a set of functions used to manipulate the _PointObject
     */
    translate: ( vector ) => {
      original.x += vector.x
      original.y += vector.y
      original.z += vector.z
      return Point( original )
    }

  }
}

/**
 * A function used to create mathematical points (_PointObject).
 * @param {Number} [x=0] The X coordonate in 3D space
 * @param {Number} [y=0] The Y coordonate in 3D space
 * @param {Number} [z=0] The Z coordonate in 3D space
 * @returns {_PointObject} Returns a new _PointObject
 */
Point.create = ( x = 0, y = 0, z = 0 ) => {
  return {
    x: x,
    y: y,
    z: z
  }
}

/**
 * Checks if an object is a valid _PointObject
 * @param {_PointObject} point The object to be checked
 * @returns {Boolean} Returns true if point is a valid _PointObject and false otherwise
 */
Point.isValid = ( point ) => {
  return (
    typeof point === 'object' &&
    typeof point.x === 'number' &&
    typeof point.y === 'number' &&
    typeof point.z === 'number'
  )
}

/**
 * Compares 2 _PointObject
 * @param {_PointObject} point1 A _PointObject
 * @param {_PointObject} point2 A _PointObject
 * @returns {Boolean} Returns true if the values of _PointObject match
 */
Point.isEqual = ( point1, point2 ) => {
  return (
    point1.x === point2.x &&
    point1.y === point2.y &&
    point1.z === point2.z
  )
}

/**
 * An object containing A set of functions used to manipulate the _PointObject. This is returned by the point() function. All manipulation functions will alter the _PointObject generated by point()
 * @typedef {Object} _PointManipulation
 */
