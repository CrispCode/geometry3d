'use strict'

import approx from './../utils/approx.js'
import { Point, isValidPoint } from './../math/point.js'

/**
 * The definition of a sphere. You may alter this object with additional properties but they will be ignored by methods such as: copy(), clone(), isEqual()
 * @typedef {Object} _SphereObject
 * @property {_PointObject} center A PointObject representing the sphere center
 * @property {Number} radius The sphere radius
 */

/**
 * Checks if an object is a valid _SphereObject
 * @param {_SphereObject} sphere The object to be checked
 * @returns {Boolean} Returns true if sphere is a valid _SphereObject and false otherwise
 */
export function isValidSphere ( sphere ) {
  return (
    typeof sphere === 'object' &&
    isValidPoint( sphere.center ) &&
    typeof sphere.radius === 'number'
  )
}

/**
 * A function used to create and manage mathematical points (_SphereObject). If the first parameter is an object, it will use that as the original _SphereObject
 * @param {(_SphereObject|_PointObject)} [center = Point().toObject()] A _SphereObject to perform operations on. Or the center _PointObject
 * @param {Number} [radius=1] The sphere radius
 * @returns {_SphereManipulation} Returns a set of functions used to manipulate the _SphereObject
 */
export function Sphere ( center = Point().toObject(), radius = 1 ) {
  let original = {}

  if ( isValidSphere( center ) ) {
    original = center
  } else if ( isValidPoint( center ) && typeof radius === 'number' ) {
    original.center = center
    original.radius = radius
  } else {
    throw new Error( 'Invalid parameters received for _SphereObject creation' )
  }

  return {
    /**
     * Returns the original _SphereObject
     * @memberof _SphereManipulation
     * @returns {_SphereObject} Returns the original _SphereObject
     */
    toObject: () => {
      return original
    },

    /**
     * Clones a _SphereObject
     * @memberof _SphereManipulation
     * @returns {_SphereManipulation} Returns a set of functions used to manipulate the _SphereManipulation
     */
    clone: () => {
      return Sphere( Point( original.center ).toObject(), original.radius )
    },

    /**
     * Copies the values of a _SphereObject into the original _SphereObject
     * @memberof _SphereManipulation
     * @param {_SphereObject} sphere Source _SphereObject
     * @returns {_SphereManipulation} Returns a set of functions used to manipulate the _SphereObject
     */
    copy: ( sphere ) => {
      original.center.x = sphere.center.x
      original.center.y = sphere.center.y
      original.center.z = sphere.center.z
      original.radius = sphere.radius
      return Sphere( original )
    },

    /**
     * Compares a _SphereObject to the original _SphereObject
     * @memberof _SphereManipulation
     * @param {_SphereObject} sphere A _SphereObject
     * @returns {Boolean} Returns true if the value of the given _SphereObject matches the original _SphereObject
     */
    isEqual: ( sphere ) => {
      return (
        original.center.x === sphere.center.x &&
        original.center.y === sphere.center.y &&
        original.center.z === sphere.center.z &&
        original.radius === sphere.radius
      )
    },

    /**
     * Rounds the _SphereObject coordonates and radius to a specified number of decimals
     * @memberof _SphereManipulation
     * @param {Number} [decimals=0] The number of decimals to round to
     * @returns {_SphereManipulation} Returns a set of functions used to manipulate the _SphereObject
     */
    round: ( decimals = 0 ) => {
      original.center.x = approx( original.center.x, decimals )
      original.center.y = approx( original.center.y, decimals )
      original.center.z = approx( original.center.z, decimals )
      original.radius = approx( original.radius, decimals )
      return Sphere( original )
    },

    /**
     * Translates a _SphereObject by a _VectorObject
     * @memberof _SphereManipulation
     * @param {_VectorObject} vector The _VectorObject used to make the translation
     * @returns {_SphereManipulation} Returns a set of functions used to manipulate the _SphereObject
     */
    translate: ( vector ) => {
      Point( original.center ).translate( vector )
      return Sphere( original )
    },

    /**
     * Scales the sphere
     * @param {Number} factor
     * @returns
     */
    scale: ( factor ) => {
      original.radius *= factor
      return Sphere( original )
    }
  }
}

/**
 * An object containing A set of functions used to manipulate the _SphereObject. This is returned by the sphere() function. All manipulation functions will alter the _SphereObject generated by sphere()
 * @typedef {Object} _SphereManipulation
 */
